= Rubric Cms

  TK.

=== Installation

1. Install plugin:

    TODO
  
2. Copy required plugins, Javascripts, and other files into your main application:

    rake rubric_cms:install

3. Create the necessary tables in your application's database:

    rake db:migrate

=== Required Gems

  MirUtility

=== Configuration

For configuration options, open config/rubric_cms.rb (in your application's config folder) for options, and set to taste. Other configuration options are set through the Site Configuration admin interface.

=== Integration

==== Window and page titles

To automatically populate window and page titles, add this to your layout file:
  <html>
  <head>
    <title><%= yield(:window_title) || title_content(:window_title) -%></title>
    ...
  </head>
  <body>
    <h1><%= yield(:page_title) || title_content(:page_title) -%></h1>
    ...

This will populate the window title and your designated page title tag with the appropriate content. You can manually set this value by adding a line like this to the top of a particular view:

  <%- title_content 'My Custom Page Title' -%>

==== Meta tags

To populate meta keyword and description tags, add this to your layout file:

  <head>
    <meta name="description" content="<%= yield(:meta_description) || meta_tag_content(:description) -%>" />
    <meta name="keywords" content="<%= yield(:meta_keywords) || meta_tag_content(:keywords) -%>" />
    ...
  </head>

This will automatically populate the meta tags from the appropriate fields from the current site page, site section, or default for the site configuration, in that order of precedence. You can also override the values on a particular page by adding this to the view:

  <%- meta_tag_content(:description, 'This is my custom description for this page.') -%>


==== CMS Administration

Add a link to the Rubric CMS admin page somewhere in your app:

  <%= link_to 'CMS Admin', rubric_cms_admin_path -%>
    
Add this inside the <head> of your layout: #FIXME can this be added to the page content?

  <%= include_tiny_mce_if_needed %>

==== Authorization

RubricCMS was designed to work out-of-the-box with the restful_authentication plugin.

If you are using a different authentication and authorization plugin or gem, you will need to provide the following methods in your application; implementation details are up to you, as long as your methods accept the same parameters and return the same values. Alternatively, you can modify the permissions code in each of the RubricCms controllers.

    # Returns true if the current user is an admin.
    def admin?
      ...
    end

    # Check if the user is authorized
    #
    # Override this method in your controllers if you want to restrict access
    # to only a few actions or if you want to check if the user
    # has the correct rights.
    def authorized?(action = action_name, resource = nil)
      ...
    end

    # Returns true or false if the user is logged in.
    # Preloads @current_user with the user model if they're logged in.
    def logged_in?
      ...
    end

    # Filter method to enforce a login requirement.
    #
    # To require logins for all actions, use this in your controllers:
    #
    #   before_filter :login_required
    #
    # To require logins for specific actions, use this in your controllers:
    #
    #   before_filter :login_required, :only => [ :edit, :update ]
    #
    # To skip this in a subclassed controller:
    #
    #   skip_before_filter :login_required
    #
    def login_required
      ...
    end

    # Inclusion hook to make authentication/authorization methods available
    # as ActionView helper methods.
    def self.included(base)
      base.send :helper_method, :current_user, :logged_in?, :authorized? if base.respond_to? :helper_method
    end


Copyright (c) 2009 SEO Logic. Created by Corey Ehmke (corey@seologic.com).
